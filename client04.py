#!/usr/bin/env python3
"""
Client04.py - Qu·∫£n l√Ω c·∫•u h√¨nh trading bot t·ª´ xa
Ch·∫°y tr√™n Android (Termux) ƒë·ªÉ thay ƒë·ªïi c·∫•u h√¨nh database
"""

import requests
import json
import os
import sys
from datetime import datetime

# C·∫•u h√¨nh
SERVER_URL = "https://f5d21b259c01.ngrok-free.app"  # Ngrok URL
TIMEOUT = 10

class ConfigManager:
    def __init__(self, server_url):
        self.server_url = server_url
        self.session = requests.Session()
        self.session.timeout = TIMEOUT
    
    def test_connection(self):
        """Test k·∫øt n·ªëi ƒë·∫øn server"""
        try:
            response = self.session.get(f"{self.server_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                return data.get('status') == 'healthy'
            return False
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def get_all_config(self):
        """L·∫•y to√†n b·ªô c·∫•u h√¨nh"""
        try:
            response = self.session.get(f"{self.server_url}/api/config")
            if response.status_code == 200:
                return response.json()['config']
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
    
    def update_setting(self, key, value):
        """C·∫≠p nh·∫≠t setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_strategy(self, strategy_name, strategy_type):
        """C·∫≠p nh·∫≠t strategy"""
        try:
            data = {'strategy_name': strategy_name, 'strategy_type': strategy_type}
            response = self.session.put(f"{self.server_url}/api/config/strategies", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_strategy_config(self, strategy_name, symbol, volume, stop_loss, take_profit, timeframe):
        """C·∫≠p nh·∫≠t strategy config"""
        try:
            data = {
                'strategy_name': strategy_name,
                'symbol': symbol,
                'volume': volume,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'timeframe': timeframe
            }
            response = self.session.put(f"{self.server_url}/api/config/strategy-config", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_test_setting(self, key, value):
        """C·∫≠p nh·∫≠t test setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/test-settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False

def clear_screen():
    """X√≥a m√†n h√¨nh"""
    os.system('clear' if os.name == 'posix' else 'cls')

def show_header():
    """Hi·ªÉn th·ªã header"""
    print("=" * 60)
    print("ü§ñ QU·∫¢N L√ù C·∫§U H√åNH TRADING BOT")
    print("=" * 60)
    print(f"üì° Server: {SERVER_URL}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)

def show_settings_menu(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω settings"""
    while True:
        clear_screen()
        show_header()
        print("‚öôÔ∏è  QU·∫¢N L√ù SETTINGS")
        print("-" * 60)
        
        # L·∫•y settings hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        settings = config['settings']
        print("üìã Settings hi·ªán t·∫°i:")
        for i, (key, value) in enumerate(settings.items(), 1):
            print(f"  {i:2d}. {key:<20} = {value}")
        
        print("\nüîß T√πy ch·ªçn:")
        print("  0. Quay l·∫°i menu ch√≠nh")
        print("  [s·ªë] Ch·ªçn setting ƒë·ªÉ s·ª≠a")
        print("  'add' Th√™m setting m·ªõi")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn: ").strip().lower()
        
        if choice == '0':
            return
        elif choice == 'add':
            key = input("Nh·∫≠p key m·ªõi: ").strip()
            value = input("Nh·∫≠p value: ").strip()
            if key and value:
                if config_manager.update_setting(key, value):
                    print("‚úÖ ƒê√£ th√™m setting th√†nh c√¥ng")
                else:
                    print("‚ùå Kh√¥ng th·ªÉ th√™m setting")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(settings):
                keys = list(settings.keys())
                key = keys[idx]
                current_value = settings[key]
                print(f"\nüìù S·ª≠a setting: {key}")
                print(f"Gi√° tr·ªã hi·ªán t·∫°i: {current_value}")
                new_value = input("Gi√° tr·ªã m·ªõi: ").strip()
                if new_value:
                    if config_manager.update_setting(key, new_value):
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t setting th√†nh c√¥ng")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t setting")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_strategies_menu(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω strategies"""
    while True:
        clear_screen()
        show_header()
        print("üéØ QU·∫¢N L√ù STRATEGIES")
        print("-" * 60)
        
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        strategies = config['strategies']
        print("üìã Strategies hi·ªán t·∫°i:")
        for i, strategy in enumerate(strategies, 1):
            print(f"  {i:2d}. {strategy['strategy_name']:<12} = {strategy['strategy_type']}")
        
        print("\nüîß T√πy ch·ªçn:")
        print("  0. Quay l·∫°i menu ch√≠nh")
        print("  [s·ªë] Ch·ªçn strategy ƒë·ªÉ s·ª≠a")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn: ").strip()
        
        if choice == '0':
            return
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(strategies):
                strategy = strategies[idx]
                strategy_name = strategy['strategy_name']
                current_type = strategy['strategy_type']
                print(f"\nüìù S·ª≠a strategy: {strategy_name}")
                print(f"Lo·∫°i hi·ªán t·∫°i: {current_type}")
                new_type = input("Lo·∫°i m·ªõi: ").strip()
                if new_type:
                    if config_manager.update_strategy(strategy_name, new_type):
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t strategy th√†nh c√¥ng")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t strategy")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_strategy_config_menu(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω strategy config"""
    while True:
        clear_screen()
        show_header()
        print("‚öôÔ∏è  QU·∫¢N L√ù STRATEGY CONFIG")
        print("-" * 60)
        
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        strategy_configs = config['strategy_config']
        
        # Nh√≥m theo strategy
        strategies = {}
        for cfg in strategy_configs:
            strategy_name = cfg['strategy_name']
            if strategy_name not in strategies:
                strategies[strategy_name] = []
            strategies[strategy_name].append(cfg)
        
        print("üìã Strategy Configs:")
        for i, (strategy_name, configs) in enumerate(strategies.items(), 1):
            print(f"\n  {i}. {strategy_name}:")
            for cfg in configs:
                print(f"     {cfg['symbol']}: {cfg['volume']}-{cfg['stop_loss']}-{cfg['take_profit']}-{cfg['timeframe']}")
        
        print("\nüîß T√πy ch·ªçn:")
        print("  0. Quay l·∫°i menu ch√≠nh")
        print("  [s·ªë] Ch·ªçn strategy ƒë·ªÉ s·ª≠a config")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn: ").strip()
        
        if choice == '0':
            return
        elif choice.isdigit():
            idx = int(choice) - 1
            strategy_names = list(strategies.keys())
            if 0 <= idx < len(strategy_names):
                strategy_name = strategy_names[idx]
                edit_strategy_config(config_manager, strategy_name, strategies[strategy_name])
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def edit_strategy_config(config_manager, strategy_name, configs):
    """S·ª≠a config cho m·ªôt strategy c·ª• th·ªÉ"""
    while True:
        clear_screen()
        show_header()
        print(f"‚öôÔ∏è  S·ª¨A CONFIG: {strategy_name}")
        print("-" * 60)
        
        print("üìã Configs hi·ªán t·∫°i:")
        for i, cfg in enumerate(configs, 1):
            print(f"  {i:2d}. {cfg['symbol']}: {cfg['volume']}-{cfg['stop_loss']}-{cfg['take_profit']}-{cfg['timeframe']}")
        
        print("\nüîß T√πy ch·ªçn:")
        print("  0. Quay l·∫°i")
        print("  [s·ªë] Ch·ªçn config ƒë·ªÉ s·ª≠a")
        print("  'add' Th√™m config m·ªõi")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn: ").strip().lower()
        
        if choice == '0':
            return
        elif choice == 'add':
            print(f"\nüìù Th√™m config cho {strategy_name}:")
            symbol = input("Symbol (v√≠ d·ª•: xauusd): ").strip().lower()
            volume = input("Volume (v√≠ d·ª•: 0.02): ").strip()
            stop_loss = input("Stop Loss (v√≠ d·ª•: 1300): ").strip()
            take_profit = input("Take Profit (v√≠ d·ª•: 2200): ").strip()
            timeframe = input("Timeframe (v√≠ d·ª•: TIMEFRAME_M1): ").strip()
            
            if all([symbol, volume, stop_loss, take_profit, timeframe]):
                try:
                    if config_manager.update_strategy_config(
                        strategy_name, symbol, float(volume), 
                        float(stop_loss), float(take_profit), timeframe
                    ):
                        print("‚úÖ ƒê√£ th√™m config th√†nh c√¥ng")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ th√™m config")
                except ValueError:
                    print("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
        elif choice.isdigit():
            idx = int(choice) - 1
            if 0 <= idx < len(configs):
                cfg = configs[idx]
                print(f"\nüìù S·ª≠a config: {cfg['symbol']}")
                print(f"Hi·ªán t·∫°i: {cfg['volume']}-{cfg['stop_loss']}-{cfg['take_profit']}-{cfg['timeframe']}")
                
                volume = input(f"Volume m·ªõi (hi·ªán t·∫°i: {cfg['volume']}): ").strip()
                stop_loss = input(f"Stop Loss m·ªõi (hi·ªán t·∫°i: {cfg['stop_loss']}): ").strip()
                take_profit = input(f"Take Profit m·ªõi (hi·ªán t·∫°i: {cfg['take_profit']}): ").strip()
                timeframe = input(f"Timeframe m·ªõi (hi·ªán t·∫°i: {cfg['timeframe']}): ").strip()
                
                # S·ª≠ d·ª•ng gi√° tr·ªã c≈© n·∫øu kh√¥ng nh·∫≠p m·ªõi
                volume = volume if volume else str(cfg['volume'])
                stop_loss = stop_loss if stop_loss else str(cfg['stop_loss'])
                take_profit = take_profit if take_profit else str(cfg['take_profit'])
                timeframe = timeframe if timeframe else cfg['timeframe']
                
                try:
                    if config_manager.update_strategy_config(
                        strategy_name, cfg['symbol'], float(volume), 
                        float(stop_loss), float(take_profit), timeframe
                    ):
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t config th√†nh c√¥ng")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t config")
                except ValueError:
                    print("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_test_settings_menu(config_manager):
    """Hi·ªÉn th·ªã menu qu·∫£n l√Ω test settings"""
    while True:
        clear_screen()
        show_header()
        print("üß™ QU·∫¢N L√ù TEST SETTINGS")
        print("-" * 60)
        
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        test_settings = config['test_settings']
        print("üìã Test Settings hi·ªán t·∫°i:")
        for i, (key, value) in enumerate(test_settings.items(), 1):
            print(f"  {i:2d}. {key:<15} = {value}")
        
        print("\nüîß T√πy ch·ªçn:")
        print("  0. Quay l·∫°i menu ch√≠nh")
        print("  [s·ªë] Ch·ªçn setting ƒë·ªÉ s·ª≠a")
        
        choice = input("\nCh·ªçn t√πy ch·ªçn: ").strip()
        
        if choice == '0':
            return
        elif choice.isdigit():
            idx = int(choice) - 1
            keys = list(test_settings.keys())
            if 0 <= idx < len(keys):
                key = keys[idx]
                current_value = test_settings[key]
                print(f"\nüìù S·ª≠a test setting: {key}")
                print(f"Gi√° tr·ªã hi·ªán t·∫°i: {current_value}")
                new_value = input("Gi√° tr·ªã m·ªõi (ON/OFF): ").strip().upper()
                if new_value in ['ON', 'OFF']:
                    if config_manager.update_test_setting(key, new_value):
                        print("‚úÖ ƒê√£ c·∫≠p nh·∫≠t test setting th√†nh c√¥ng")
                    else:
                        print("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t test setting")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                else:
                    print("‚ùå Gi√° tr·ªã ph·∫£i l√† ON ho·∫∑c OFF")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_main_menu(config_manager):
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    while True:
        clear_screen()
        show_header()
        
        # Test k·∫øt n·ªëi
        if not config_manager.test_connection():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!")
            print("H√£y ki·ªÉm tra:")
            print("  - Server c√≥ ƒëang ch·∫°y kh√¥ng?")
            print("  - IP address c√≥ ƒë√∫ng kh√¥ng?")
            print("  - Port 5000 c√≥ m·ªü kh√¥ng?")
            print(f"  - URL hi·ªán t·∫°i: {SERVER_URL}")
            print("\nNh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...")
            input()
            continue
        
        print("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng!")
        
        # L·∫•y th√¥ng tin c·∫•u h√¨nh
        config = config_manager.get_all_config()
        if config:
            print(f"üìä Th·ªëng k√™:")
            print(f"  - Settings: {len(config['settings'])} items")
            print(f"  - Strategies: {len(config['strategies'])} items")
            print(f"  - Strategy Configs: {len(config['strategy_config'])} items")
            print(f"  - Test Settings: {len(config['test_settings'])} items")
        
        print("\nüîß MENU CH√çNH:")
        print("  1. ‚öôÔ∏è  Qu·∫£n l√Ω Settings")
        print("  2. üéØ Qu·∫£n l√Ω Strategies")
        print("  3. ‚öôÔ∏è  Qu·∫£n l√Ω Strategy Config")
        print("  4. üß™ Qu·∫£n l√Ω Test Settings")
        print("  5. üìä Xem to√†n b·ªô c·∫•u h√¨nh")
        print("  0. üö™ Tho√°t")
        print("-" * 60)
        
        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-5): ").strip()
        
        if choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        elif choice == '1':
            show_settings_menu(config_manager)
        elif choice == '2':
            show_strategies_menu(config_manager)
        elif choice == '3':
            show_strategy_config_menu(config_manager)
        elif choice == '4':
            show_test_settings_menu(config_manager)
        elif choice == '5':
            show_full_config(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_full_config(config_manager):
    """Hi·ªÉn th·ªã to√†n b·ªô c·∫•u h√¨nh"""
    clear_screen()
    show_header()
    print("üìä TO√ÄN B·ªò C·∫§U H√åNH")
    print("=" * 60)
    
    config = config_manager.get_all_config()
    if not config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return
    
    print("\n‚öôÔ∏è SETTINGS:")
    for key, value in config['settings'].items():
        print(f"  {key} = {value}")
    
    print("\nüéØ STRATEGIES:")
    for strategy in config['strategies']:
        print(f"  {strategy['strategy_name']} = {strategy['strategy_type']}")
    
    print("\n‚öôÔ∏è STRATEGY CONFIGS:")
    for cfg in config['strategy_config']:
        print(f"  {cfg['strategy_name']} - {cfg['symbol']}: {cfg['volume']}-{cfg['stop_loss']}-{cfg['take_profit']}-{cfg['timeframe']}")
    
    print("\nüß™ TEST SETTINGS:")
    for key, value in config['test_settings'].items():
        print(f"  {key} = {value}")
    
    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")

def main():
    """H√†m ch√≠nh"""
    global SERVER_URL
    
    print("üöÄ KH·ªûI ƒê·ªòNG CLIENT04.PY")
    print("=" * 60)
    
    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
    print("üì° Ki·ªÉm tra k·∫øt n·ªëi...")
    
    config_manager = ConfigManager(SERVER_URL)
    
    if not config_manager.test_connection():
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {SERVER_URL}")
        print("\nüîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("1. ƒê·∫£m b·∫£o server04.py ƒëang ch·∫°y tr√™n m√°y ch·ªß")
        print("2. Ki·ªÉm tra IP address trong file client04.py")
        print("3. ƒê·∫£m b·∫£o port 5000 ƒë∆∞·ª£c m·ªü")
        print("4. Ki·ªÉm tra firewall")
        print(f"\nIP hi·ªán t·∫°i: {SERVER_URL}")
        change_ip = input("B·∫°n c√≥ mu·ªën thay ƒë·ªïi IP kh√¥ng? (y/n): ").lower()
        if change_ip == 'y':
            new_ip = input("Nh·∫≠p IP m·ªõi: ").strip()
            if new_ip:
                SERVER_URL = f"http://{new_ip}:5000"
                config_manager = ConfigManager(SERVER_URL)
                print(f"‚úÖ ƒê√£ thay ƒë·ªïi IP th√†nh: {SERVER_URL}")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    # Hi·ªÉn th·ªã menu ch√≠nh
    show_main_menu(config_manager)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã gi√°n ƒëo·∫°n")
        print("üëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        print("H√£y ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫°i")

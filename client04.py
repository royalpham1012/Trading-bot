#!/usr/bin/env python3
"""
Client04.py - 2507302045 - Qu·∫£n l√Ω c·∫•u h√¨nh trading bot t·ª´ xa
Ch·∫°y tr√™n Android (Termux) ƒë·ªÉ thay ƒë·ªïi c·∫•u h√¨nh database
"""

import requests
import json
import os
import sys
import time
import threading
from datetime import datetime

# C·∫•u h√¨nh
SERVER_URL = "https://2506260734c7.ngrok-free.app"  # Ngrok URL
TIMEOUT = 10

class ConfigManager:
    def __init__(self, server_url):
        self.server_url = server_url
        self.session = requests.Session()
        self.session.timeout = TIMEOUT
    
    def test_connection(self):
        """Test k·∫øt n·ªëi ƒë·∫øn server"""
        try:
            response = self.session.get(f"{self.server_url}/api/health")
            if response.status_code == 200:
                data = response.json()
                return data.get('status') == 'healthy'
            return False
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def get_all_config(self):
        """L·∫•y to√†n b·ªô c·∫•u h√¨nh"""
        try:
            response = self.session.get(f"{self.server_url}/api/config")
            if response.status_code == 200:
                return response.json()['config']
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
    
    def update_setting(self, key, value):
        """C·∫≠p nh·∫≠t setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_strategy(self, strategy_name, strategy_type):
        """C·∫≠p nh·∫≠t strategy"""
        try:
            data = {'strategy_name': strategy_name, 'strategy_type': strategy_type}
            response = self.session.put(f"{self.server_url}/api/config/strategies", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_strategy_config(self, strategy_name, symbol, volume, stop_loss, take_profit, timeframe):
        """C·∫≠p nh·∫≠t strategy config"""
        try:
            data = {
                'strategy_name': strategy_name,
                'symbol': symbol,
                'volume': volume,
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'timeframe': timeframe
            }
            response = self.session.put(f"{self.server_url}/api/config/strategy-config", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def update_test_setting(self, key, value):
        """C·∫≠p nh·∫≠t test setting"""
        try:
            data = {'key': key, 'value': value}
            response = self.session.put(f"{self.server_url}/api/config/test-settings", json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('success', False)
            return False
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return False
    
    def refresh_bot(self):
        """G·ª≠i l·ªánh refresh bot"""
        try:
            response = self.session.post(f"{self.server_url}/api/refresh-bot")
            if response.status_code == 200:
                result = response.json()
                return True, result.get('message', 'Refresh bot th√†nh c√¥ng')
            else:
                error_data = response.json()
                return False, error_data.get('message', 'L·ªói kh√¥ng x√°c ƒë·ªãnh')
        except Exception as e:
            return False, f"L·ªói k·∫øt n·ªëi: {e}"
    
    def get_mt5_account_info(self):
        """L·∫•y th√¥ng tin t√†i kho·∫£n MT5"""
        try:
            response = self.session.get(f"{self.server_url}/api/mt5-account-info")
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return None
    
    def get_config_info(self):
        """L·∫•y th√¥ng tin c·∫•u h√¨nh t·ª´ server"""
        try:
            response = self.session.get(f"{self.server_url}/api/config")
            if response.status_code == 200:
                data = response.json()
                return data.get('config', {}).get('settings', {})
            else:
                print(f"‚ùå L·ªói HTTP: {response.status_code}")
                return {}
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
            return {}

def clear_screen():
    """X√≥a m√†n h√¨nh"""
    os.system('clear' if os.name == 'posix' else 'cls')

def show_header():
    """Hi·ªÉn th·ªã header"""
    print("=" * 60)
    print("ü§ñ QU·∫¢N L√ù C·∫§U H√åNH TRADING BOT")
    print("=" * 60)
    print(f"üì° Server: {SERVER_URL}")
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 60)

def show_settings_management(config_manager):
    """Qu·∫£n l√Ω Settings"""
    while True:
        clear_screen()
        show_header()
        
        print("‚öôÔ∏è QU·∫¢N L√ù SETTINGS")
        print("=" * 60)
        
        # L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ server")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        settings = config.get('settings', {})
        
        print("üìã SETTINGS HI·ªÜN T·∫†I:")
        print("-" * 60)
        if settings:
            for key, value in settings.items():
                print(f"  {key}: {value}")
        else:
            print("  Kh√¥ng c√≥ settings n√†o")
        
        print("\nüîß T√ôY CH·ªåN:")
        print("  1. üìù C·∫≠p nh·∫≠t setting")
        print("  2. üîÑ L√†m m·ªõi danh s√°ch")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)
        
        choice = input("Ch·ªçn t√πy ch·ªçn (0-2): ").strip()
        
        if choice == '0':
            break
        elif choice == '1':
            print("\nüìù C·∫¨P NH·∫¨T SETTING")
            print("-" * 40)
            
            # Hi·ªÉn th·ªã danh s√°ch settings c√≥ s·∫µn
            print("C√°c settings c√≥ th·ªÉ c·∫≠p nh·∫≠t:")
            common_settings = [
                'balanceat5am', 'minbalance', 'drawdown', 'dailyprofittarget',
                'max_positions', 'risk_per_trade', 'enable_trading', 'debug_mode'
            ]
            
            for i, setting in enumerate(common_settings, 1):
                current_value = settings.get(setting, 'Ch∆∞a thi·∫øt l·∫≠p')
                print(f"  {i}. {setting}: {current_value}")
            
            print(f"  {len(common_settings) + 1}. T√πy ch·ªânh kh√°c")
            
            setting_choice = input(f"\nCh·ªçn setting (1-{len(common_settings) + 1}): ").strip()
            
            try:
                setting_choice = int(setting_choice)
                if 1 <= setting_choice <= len(common_settings):
                    key = common_settings[setting_choice - 1]
                elif setting_choice == len(common_settings) + 1:
                    key = input("Nh·∫≠p t√™n setting: ").strip()
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue
                
                if not key:
                    print("‚ùå T√™n setting kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue
                
                value = input(f"Nh·∫≠p gi√° tr·ªã cho {key}: ").strip()
                
                if config_manager.update_setting(key, value):
                    print("‚úÖ C·∫≠p nh·∫≠t setting th√†nh c√¥ng!")
                else:
                    print("‚ùå C·∫≠p nh·∫≠t setting th·∫•t b·∫°i!")
                
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '2':
            print("üîÑ ƒêang l√†m m·ªõi danh s√°ch...")
            time.sleep(1)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_strategies_management(config_manager):
    """Qu·∫£n l√Ω Strategies"""
    while True:
        clear_screen()
        show_header()
        
        print("üéØ QU·∫¢N L√ù STRATEGIES")
        print("=" * 60)
        
        # L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ server")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        strategies = config.get('strategies', {})
        
        print("üìã STRATEGIES HI·ªÜN T·∫†I:")
        print("-" * 60)
        if strategies:
            for strategy_name, strategy_type in strategies.items():
                status_icon = "üü¢" if strategy_type == "active" else "üî¥"
                print(f"  {status_icon} {strategy_name}: {strategy_type}")
        else:
            print("  Kh√¥ng c√≥ strategies n√†o")
        
        print("\nüîß T√ôY CH·ªåN:")
        print("  1. ‚ûï Th√™m strategy m·ªõi")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t strategy")
        print("  3. üóëÔ∏è X√≥a strategy")
        print("  4. üîÑ L√†m m·ªõi danh s√°ch")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)
        
        choice = input("Ch·ªçn t√πy ch·ªçn (0-4): ").strip()
        
        if choice == '0':
            break
        elif choice == '1':
            print("\n‚ûï TH√äM STRATEGY M·ªöI")
            print("-" * 40)
            
            strategy_name = input("Nh·∫≠p t√™n strategy: ").strip()
            if not strategy_name:
                print("‚ùå T√™n strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("\nLo·∫°i strategy:")
            print("  1. active - K√≠ch ho·∫°t")
            print("  2. inactive - T·∫°m d·ª´ng")
            print("  3. test - Ch·∫ø ƒë·ªô test")
            
            type_choice = input("Ch·ªçn lo·∫°i (1-3): ").strip()
            strategy_types = {1: "active", 2: "inactive", 3: "test"}
            
            if type_choice in ['1', '2', '3']:
                strategy_type = strategy_types[int(type_choice)]
                
                if config_manager.update_strategy(strategy_name, strategy_type):
                    print("‚úÖ Th√™m strategy th√†nh c√¥ng!")
                else:
                    print("‚ùå Th√™m strategy th·∫•t b·∫°i!")
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '2':
            print("\n‚úèÔ∏è C·∫¨P NH·∫¨T STRATEGY")
            print("-" * 40)
            
            if not strategies:
                print("‚ùå Kh√¥ng c√≥ strategies n√†o ƒë·ªÉ c·∫≠p nh·∫≠t!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("Ch·ªçn strategy c·∫ßn c·∫≠p nh·∫≠t:")
            strategy_list = list(strategies.keys())
            for i, strategy in enumerate(strategy_list, 1):
                print(f"  {i}. {strategy}")
            
            try:
                strategy_choice = int(input(f"\nCh·ªçn strategy (1-{len(strategy_list)}): ").strip())
                if 1 <= strategy_choice <= len(strategy_list):
                    strategy_name = strategy_list[strategy_choice - 1]
                    
                    print(f"\nC·∫≠p nh·∫≠t strategy: {strategy_name}")
                    print("Lo·∫°i strategy:")
                    print("  1. active - K√≠ch ho·∫°t")
                    print("  2. inactive - T·∫°m d·ª´ng")
                    print("  3. test - Ch·∫ø ƒë·ªô test")
                    
                    type_choice = input("Ch·ªçn lo·∫°i m·ªõi (1-3): ").strip()
                    strategy_types = {1: "active", 2: "inactive", 3: "test"}
                    
                    if type_choice in ['1', '2', '3']:
                        strategy_type = strategy_types[int(type_choice)]
                        
                        if config_manager.update_strategy(strategy_name, strategy_type):
                            print("‚úÖ C·∫≠p nh·∫≠t strategy th√†nh c√¥ng!")
                        else:
                            print("‚ùå C·∫≠p nh·∫≠t strategy th·∫•t b·∫°i!")
                    else:
                        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '3':
            print("\nüóëÔ∏è X√ìA STRATEGY")
            print("-" * 40)
            
            if not strategies:
                print("‚ùå Kh√¥ng c√≥ strategies n√†o ƒë·ªÉ x√≥a!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("Ch·ªçn strategy c·∫ßn x√≥a:")
            strategy_list = list(strategies.keys())
            for i, strategy in enumerate(strategy_list, 1):
                print(f"  {i}. {strategy}")
            
            try:
                strategy_choice = int(input(f"\nCh·ªçn strategy (1-{len(strategy_list)}): ").strip())
                if 1 <= strategy_choice <= len(strategy_list):
                    strategy_name = strategy_list[strategy_choice - 1]
                    
                    confirm = input(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a strategy '{strategy_name}'? (y/n): ").strip().lower()
                    if confirm == 'y':
                        if config_manager.update_strategy(strategy_name, "deleted"):
                            print("‚úÖ X√≥a strategy th√†nh c√¥ng!")
                        else:
                            print("‚ùå X√≥a strategy th·∫•t b·∫°i!")
                    else:
                        print("‚ùå ƒê√£ h·ªßy x√≥a strategy")
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '4':
            print("üîÑ ƒêang l√†m m·ªõi danh s√°ch...")
            time.sleep(1)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_strategy_config_management(config_manager):
    """Qu·∫£n l√Ω Strategy Config"""
    while True:
        clear_screen()
        show_header()
        
        print("‚öôÔ∏è QU·∫¢N L√ù STRATEGY CONFIG")
        print("=" * 60)
        
        # L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ server")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        strategy_configs = config.get('strategy_config', {})
        
        print("üìã STRATEGY CONFIGS HI·ªÜN T·∫†I:")
        print("-" * 60)
        if strategy_configs:
            for strategy_name, config_data in strategy_configs.items():
                print(f"\nüéØ Strategy: {strategy_name}")
                for key, value in config_data.items():
                    print(f"    {key}: {value}")
        else:
            print("  Kh√¥ng c√≥ strategy config n√†o")
        
        print("\nüîß T√ôY CH·ªåN:")
        print("  1. ‚ûï Th√™m strategy config m·ªõi")
        print("  2. ‚úèÔ∏è C·∫≠p nh·∫≠t strategy config")
        print("  3. üóëÔ∏è X√≥a strategy config")
        print("  4. üîÑ L√†m m·ªõi danh s√°ch")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)
        
        choice = input("Ch·ªçn t√πy ch·ªçn (0-4): ").strip()
        
        if choice == '0':
            break
        elif choice == '1':
            print("\n‚ûï TH√äM STRATEGY CONFIG M·ªöI")
            print("-" * 40)
            
            strategy_name = input("Nh·∫≠p t√™n strategy: ").strip()
            if not strategy_name:
                print("‚ùå T√™n strategy kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            symbol = input("Nh·∫≠p symbol (VD: EURUSD): ").strip().upper()
            if not symbol:
                print("‚ùå Symbol kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            try:
                volume = float(input("Nh·∫≠p volume (VD: 0.01): ").strip())
                stop_loss = float(input("Nh·∫≠p stop loss (pips): ").strip())
                take_profit = float(input("Nh·∫≠p take profit (pips): ").strip())
                timeframe = input("Nh·∫≠p timeframe (VD: M5, M15, H1): ").strip().upper()
                
                if config_manager.update_strategy_config(strategy_name, symbol, volume, stop_loss, take_profit, timeframe):
                    print("‚úÖ Th√™m strategy config th√†nh c√¥ng!")
                else:
                    print("‚ùå Th√™m strategy config th·∫•t b·∫°i!")
                    
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá cho volume, stop loss, take profit!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '2':
            print("\n‚úèÔ∏è C·∫¨P NH·∫¨T STRATEGY CONFIG")
            print("-" * 40)
            
            if not strategy_configs:
                print("‚ùå Kh√¥ng c√≥ strategy config n√†o ƒë·ªÉ c·∫≠p nh·∫≠t!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("Ch·ªçn strategy config c·∫ßn c·∫≠p nh·∫≠t:")
            config_list = list(strategy_configs.keys())
            for i, config_name in enumerate(config_list, 1):
                print(f"  {i}. {config_name}")
            
            try:
                config_choice = int(input(f"\nCh·ªçn config (1-{len(config_list)}): ").strip())
                if 1 <= config_choice <= len(config_list):
                    strategy_name = config_list[config_choice - 1]
                    current_config = strategy_configs[strategy_name]
                    
                    print(f"\nC·∫≠p nh·∫≠t config cho strategy: {strategy_name}")
                    print("Nh·∫≠p gi√° tr·ªã m·ªõi (ƒë·ªÉ tr·ªëng ƒë·ªÉ gi·ªØ nguy√™n):")
                    
                    symbol = input(f"Symbol ({current_config.get('symbol', 'N/A')}): ").strip().upper()
                    if not symbol:
                        symbol = current_config.get('symbol', 'EURUSD')
                    
                    try:
                        volume_input = input(f"Volume ({current_config.get('volume', 'N/A')}): ").strip()
                        volume = float(volume_input) if volume_input else float(current_config.get('volume', 0.01))
                        
                        sl_input = input(f"Stop Loss ({current_config.get('stop_loss', 'N/A')}): ").strip()
                        stop_loss = float(sl_input) if sl_input else float(current_config.get('stop_loss', 50))
                        
                        tp_input = input(f"Take Profit ({current_config.get('take_profit', 'N/A')}): ").strip()
                        take_profit = float(tp_input) if tp_input else float(current_config.get('take_profit', 100))
                        
                        timeframe = input(f"Timeframe ({current_config.get('timeframe', 'N/A')}): ").strip().upper()
                        if not timeframe:
                            timeframe = current_config.get('timeframe', 'M5')
                        
                        if config_manager.update_strategy_config(strategy_name, symbol, volume, stop_loss, take_profit, timeframe):
                            print("‚úÖ C·∫≠p nh·∫≠t strategy config th√†nh c√¥ng!")
                        else:
                            print("‚ùå C·∫≠p nh·∫≠t strategy config th·∫•t b·∫°i!")
                            
                    except ValueError:
                        print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!")
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '3':
            print("\nüóëÔ∏è X√ìA STRATEGY CONFIG")
            print("-" * 40)
            
            if not strategy_configs:
                print("‚ùå Kh√¥ng c√≥ strategy config n√†o ƒë·ªÉ x√≥a!")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("Ch·ªçn strategy config c·∫ßn x√≥a:")
            config_list = list(strategy_configs.keys())
            for i, config_name in enumerate(config_list, 1):
                print(f"  {i}. {config_name}")
            
            try:
                config_choice = int(input(f"\nCh·ªçn config (1-{len(config_list)}): ").strip())
                if 1 <= config_choice <= len(config_list):
                    strategy_name = config_list[config_choice - 1]
                    
                    confirm = input(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a config cho strategy '{strategy_name}'? (y/n): ").strip().lower()
                    if confirm == 'y':
                        # X√≥a b·∫±ng c√°ch set v·ªÅ gi√° tr·ªã r·ªóng
                        if config_manager.update_strategy_config(strategy_name, "", 0, 0, 0, ""):
                            print("‚úÖ X√≥a strategy config th√†nh c√¥ng!")
                        else:
                            print("‚ùå X√≥a strategy config th·∫•t b·∫°i!")
                    else:
                        print("‚ùå ƒê√£ h·ªßy x√≥a strategy config")
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '4':
            print("üîÑ ƒêang l√†m m·ªõi danh s√°ch...")
            time.sleep(1)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_test_settings_management(config_manager):
    """Qu·∫£n l√Ω Test Settings"""
    while True:
        clear_screen()
        show_header()
        
        print("üß™ QU·∫¢N L√ù TEST SETTINGS")
        print("=" * 60)
        
        # L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
        config = config_manager.get_all_config()
        if not config:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ server")
            input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
            return
        
        test_settings = config.get('test_settings', {})
        
        print("üìã TEST SETTINGS HI·ªÜN T·∫†I:")
        print("-" * 60)
        if test_settings:
            for key, value in test_settings.items():
                print(f"  {key}: {value}")
        else:
            print("  Kh√¥ng c√≥ test settings n√†o")
        
        print("\nüîß T√ôY CH·ªåN:")
        print("  1. üìù C·∫≠p nh·∫≠t test setting")
        print("  2. üîÑ L√†m m·ªõi danh s√°ch")
        print("  0. üîô Quay l·∫°i menu ch√≠nh")
        print("-" * 60)
        
        choice = input("Ch·ªçn t√πy ch·ªçn (0-2): ").strip()
        
        if choice == '0':
            break
        elif choice == '1':
            print("\nüìù C·∫¨P NH·∫¨T TEST SETTING")
            print("-" * 40)
            
            # Hi·ªÉn th·ªã danh s√°ch test settings c√≥ s·∫µn
            print("C√°c test settings c√≥ th·ªÉ c·∫≠p nh·∫≠t:")
            common_test_settings = [
                'refresh_bot', 'test_mode', 'debug_level', 'log_level',
                'enable_notifications', 'auto_restart', 'performance_mode'
            ]
            
            for i, setting in enumerate(common_test_settings, 1):
                current_value = test_settings.get(setting, 'Ch∆∞a thi·∫øt l·∫≠p')
                print(f"  {i}. {setting}: {current_value}")
            
            print(f"  {len(common_test_settings) + 1}. T√πy ch·ªânh kh√°c")
            
            setting_choice = input(f"\nCh·ªçn setting (1-{len(common_test_settings) + 1}): ").strip()
            
            try:
                setting_choice = int(setting_choice)
                if 1 <= setting_choice <= len(common_test_settings):
                    key = common_test_settings[setting_choice - 1]
                elif setting_choice == len(common_test_settings) + 1:
                    key = input("Nh·∫≠p t√™n test setting: ").strip()
                else:
                    print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue
                
                if not key:
                    print("‚ùå T√™n test setting kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    continue
                
                value = input(f"Nh·∫≠p gi√° tr·ªã cho {key}: ").strip()
                
                if config_manager.update_test_setting(key, value):
                    print("‚úÖ C·∫≠p nh·∫≠t test setting th√†nh c√¥ng!")
                else:
                    print("‚ùå C·∫≠p nh·∫≠t test setting th·∫•t b·∫°i!")
                
            except ValueError:
                print("‚ùå Vui l√≤ng nh·∫≠p s·ªë!")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            
        elif choice == '2':
            print("üîÑ ƒêang l√†m m·ªõi danh s√°ch...")
            time.sleep(1)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def show_full_config(config_manager):
    """Xem to√†n b·ªô c·∫•u h√¨nh"""
    clear_screen()
    show_header()
    
    print("üìä XEM TO√ÄN B·ªò C·∫§U H√åNH")
    print("=" * 60)
    
    # L·∫•y c·∫•u h√¨nh t·ª´ server
    config = config_manager.get_all_config()
    if not config:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y c·∫•u h√¨nh t·ª´ server")
        input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i...")
        return
    
    print("üìã C·∫§U H√åNH CHI TI·∫æT:")
    print("=" * 60)
    
    # Hi·ªÉn th·ªã Settings
    settings = config.get('settings', {})
    print("\n‚öôÔ∏è SETTINGS:")
    print("-" * 40)
    if settings:
        for key, value in settings.items():
            print(f"  {key}: {value}")
    else:
        print("  Kh√¥ng c√≥ settings n√†o")
    
    # Hi·ªÉn th·ªã Strategies
    strategies = config.get('strategies', {})
    print("\nüéØ STRATEGIES:")
    print("-" * 40)
    if strategies:
        for strategy_name, strategy_type in strategies.items():
            status_icon = "üü¢" if strategy_type == "active" else "üî¥"
            print(f"  {status_icon} {strategy_name}: {strategy_type}")
    else:
        print("  Kh√¥ng c√≥ strategies n√†o")
    
    # Hi·ªÉn th·ªã Strategy Configs
    strategy_configs = config.get('strategy_config', {})
    print("\n‚öôÔ∏è STRATEGY CONFIGS:")
    print("-" * 40)
    if strategy_configs:
        for strategy_name, config_data in strategy_configs.items():
            print(f"\n  üéØ Strategy: {strategy_name}")
            for key, value in config_data.items():
                print(f"    {key}: {value}")
    else:
        print("  Kh√¥ng c√≥ strategy configs n√†o")
    
    # Hi·ªÉn th·ªã Test Settings
    test_settings = config.get('test_settings', {})
    print("\nüß™ TEST SETTINGS:")
    print("-" * 40)
    if test_settings:
        for key, value in test_settings.items():
            print(f"  {key}: {value}")
    else:
        print("  Kh√¥ng c√≥ test settings n√†o")
    
    # Th·ªëng k√™ t·ªïng quan
    print("\nüìä TH·ªêNG K√ä T·ªîNG QUAN:")
    print("-" * 40)
    print(f"  üìù T·ªïng s·ªë settings: {len(settings)}")
    print(f"  üéØ T·ªïng s·ªë strategies: {len(strategies)}")
    print(f"  ‚öôÔ∏è T·ªïng s·ªë strategy configs: {len(strategy_configs)}")
    print(f"  üß™ T·ªïng s·ªë test settings: {len(test_settings)}")
    
    # Strategies ƒëang ho·∫°t ƒë·ªông
    active_strategies = [name for name, status in strategies.items() if status == "active"]
    print(f"  üü¢ Strategies ƒëang ho·∫°t ƒë·ªông: {len(active_strategies)}")
    if active_strategies:
        print(f"    {', '.join(active_strategies)}")
    
    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...")

def show_mt5_account_info(config_manager):
    """Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n MT5 v·ªõi c·∫≠p nh·∫≠t realtime"""
    # Bi·∫øn ƒë·ªÉ ki·ªÉm so√°t v√≤ng l·∫∑p
    stop_updating = False
    update_count = 0
    
    def check_for_enter():
        """Thread ƒë·ªÉ ki·ªÉm tra ph√≠m Enter"""
        nonlocal stop_updating
        input("Nh·∫•n Enter ƒë·ªÉ d·ª´ng c·∫≠p nh·∫≠t...")
        stop_updating = True
    
    # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra ph√≠m Enter
    enter_thread = threading.Thread(target=check_for_enter, daemon=True)
    enter_thread.start()
    
    print("üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t realtime m·ªói 30 gi√¢y...")
    time.sleep(0.5)
    
    while not stop_updating:
        try:
            update_count += 1
            
            # X√≥a m√†n h√¨nh v√† hi·ªÉn th·ªã header
            clear_screen()
            print("=" * 60)
            print("ü§ñ QU·∫¢N L√ù C·∫§U H√åNH TRADING BOT")
            print("=" * 60)
            print(f"üì° Server: {SERVER_URL}")
            print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            print("-" * 60)
            print("üí∞ TH√îNG TIN T√ÄI KHO·∫¢N MT5 (REALTIME)")
            print("=" * 60)
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i c·∫≠p nh·∫≠t
            loading_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
            loading_char = loading_chars[update_count % len(loading_chars)]
            print(f"{loading_char} ƒêang c·∫≠p nh·∫≠t... (L·∫ßn th·ª© {update_count})")
            
            # L·∫•y th√¥ng tin t√†i kho·∫£n MT5
            account_info = config_manager.get_mt5_account_info()
            if not account_info:
                print("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t√†i kho·∫£n MT5")
                print("C√≥ th·ªÉ do:")
                print("  - Bot ch∆∞a kh·ªüi ƒë·ªông")
                print("  - MT5 ch∆∞a k·∫øt n·ªëi")
                print("  - Server kh√¥ng h·ªó tr·ª£ API n√†y")
                print("\nüîÑ ƒêang th·ª≠ l·∫°i...")
                time.sleep(3)
                continue
            
            # Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n
            if 'account' in account_info:
                account = account_info['account']
                print("\nüìä TH√îNG TIN T√ÄI KHO·∫¢N:")
                print(f"  üÜî Login: {account.get('login', 'N/A')}")
                print(f"  üè¶ Server: {account.get('server', 'N/A')}")
                print(f"  üí∞ Balance: ${account.get('balance', 0):,.2f}")
                print(f"  üíµ Equity: ${account.get('equity', 0):,.2f}")
                print(f"  üìà Profit: ${account.get('profit', 0):,.2f}")
                print(f"  üí≥ Margin: ${account.get('margin', 0):,.2f}")
                print(f"  üîí Free Margin: ${account.get('free_margin', 0):,.2f}")
                print(f"  üìä Margin Level: {account.get('margin_level', 0):,.2f}%")
                print(f"  üéØ Currency: {account.get('currency', 'N/A')}")
            
            # Hi·ªÉn th·ªã c√°c l·ªánh ƒëang m·ªü
            if 'positions' in account_info:
                positions = account_info['positions']
                print(f"\nüìã L·ªÜNH ƒêANG M·ªû ({len(positions)} l·ªánh):")
                if positions:
                    print(f"{'Ticket':<10} {'Symbol':<10} {'Type':<6} {'Volume':<8} {'Price':<10} {'Profit':<12} {'Comment':<15}")
                    print("-" * 80)
                    for pos in positions:
                        ticket = pos.get('ticket', 'N/A')
                        symbol = pos.get('symbol', 'N/A')
                        pos_type = 'BUY' if pos.get('type', 0) == 0 else 'SELL'
                        volume = pos.get('volume', 0)
                        price = pos.get('price_open', 0)
                        profit = pos.get('profit', 0)
                        comment = pos.get('comment', 'N/A')
                        
                        # Th√™m m√†u s·∫Øc cho profit
                        profit_str = f"${profit:<11.2f}"
                        if profit > 0:
                            profit_str = f"üìà {profit_str}"
                        elif profit < 0:
                            profit_str = f"üìâ {profit_str}"
                        
                        print(f"{ticket:<10} {symbol:<10} {pos_type:<6} {volume:<8.2f} {price:<10.5f} {profit_str} {comment:<15}")
                else:
                    print("  Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü")
            
            # L·∫•y th√¥ng tin c·∫•u h√¨nh
            config_info = config_manager.get_config_info()
            
            # Hi·ªÉn th·ªã th·ªëng k√™
            if 'summary' in account_info:
                summary = account_info['summary']
                print(f"\nüìà TH·ªêNG K√ä:")
                print(f"  üìä T·ªïng l·ªánh m·ªü: {summary.get('total_positions', 0)}")
                print(f"  üí∞ T·ªïng profit: ${summary.get('total_profit', 0):,.2f}")
                print(f"  üìà L·ªánh c√≥ l√£i: {summary.get('profitable_positions', 0)}")
                print(f"  üìâ L·ªánh thua l·ªó: {summary.get('losing_positions', 0)}")
                
                # Th√™m th√¥ng tin c·∫•u h√¨nh
                if config_info:
                    print(f"\n‚öôÔ∏è C·∫§U H√åNH:")
                    balance_at_5am = float(config_info.get('balanceat5am', 0))
                    min_balance = float(config_info.get('minbalance', 0))
                    drawdown_limit = float(config_info.get('drawdown', 0))
                    daily_profit_target = float(config_info.get('dailyprofittarget', 0))
                    current_profit = account.get('profit', 0)
                    
                    print(f"  üí∞ Balance at 5AM: ${balance_at_5am:,.2f}")
                    print(f"  üîí Min Balance: ${min_balance:,.2f}")
                    print(f"  üìâ Drawdown Limit: ${drawdown_limit:,.2f}")
                    print(f"  üéØ Daily Profit Target: ${daily_profit_target:,.2f}")
                    print(f"  üìä Profit hi·ªán t·∫°i: ${current_profit:,.2f}")
                    
                    # T√≠nh to√°n th√™m
                    current_balance = account.get('balance', 0)
                    daily_profit = current_balance - balance_at_5am
                    drawdown_used = balance_at_5am - current_balance
                    
                    print(f"\nüìä PH√ÇN T√çCH:")
                    print(f"  üìà Daily Profit: ${daily_profit:,.2f}")
                    print(f"  üìâ Drawdown Used: ${drawdown_used:,.2f}")
                    
                    # Hi·ªÉn th·ªã tr·∫°ng th√°i
                    if daily_profit >= daily_profit_target:
                        print(f"  üéØ Daily Target: ‚úÖ ƒê·∫†T M·ª§C TI√äU")
                    else:
                        remaining = daily_profit_target - daily_profit
                        print(f"  üéØ Daily Target: ‚è≥ C√≤n ${remaining:,.2f}")
                    
                    if drawdown_used >= drawdown_limit:
                        print(f"  üìâ Drawdown: ‚ö†Ô∏è V∆Ø·ª¢T GI·ªöI H·∫†N")
                    else:
                        remaining_dd = drawdown_limit - drawdown_used
                        print(f"  üìâ Drawdown: ‚úÖ C√≤n ${remaining_dd:,.2f}")
                    
                    if current_balance < min_balance:
                        print(f"  üîí Min Balance: ‚ö†Ô∏è D∆Ø·ªöI GI·ªöI H·∫†N")
                    else:
                        print(f"  üîí Min Balance: ‚úÖ AN TO√ÄN")
            
            # Hi·ªÉn th·ªã th·ªùi gian c·∫≠p nh·∫≠t
            if 'timestamp' in account_info:
                timestamp = account_info['timestamp']
                print(f"\n‚è∞ C·∫≠p nh·∫≠t l√∫c: {timestamp}")
            
            print("\n" + "=" * 60)
            print(f"üîÑ C·∫≠p nh·∫≠t l·∫ßn th·ª© {update_count} - M·ªói 30 gi√¢y - Nh·∫•n Enter ƒë·ªÉ d·ª´ng")
            
            # Ch·ªù 30 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t l·∫°i
            time.sleep(30)
            
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")
            print("üîÑ ƒêang th·ª≠ l·∫°i...")
            time.sleep(3)
    
    print("\n‚úÖ ƒê√£ d·ª´ng c·∫≠p nh·∫≠t realtime")
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...")

def show_refresh_bot(config_manager):
    """Hi·ªÉn th·ªã ch·ª©c nƒÉng refresh bot"""
    clear_screen()
    show_header()
    
    print("üîÑ REFRESH BOT")
    print("=" * 60)
    print("Ch·ª©c nƒÉng n√†y s·∫Ω g·ª≠i l·ªánh refresh ƒë·∫øn bot ƒë·ªÉ:")
    print("  - T·∫£i l·∫°i c·∫•u h√¨nh t·ª´ database")
    print("  - Kh·ªüi ƒë·ªông l·∫°i c√°c strategy")
    print("  - X√≥a cache v√† file t·∫°m th·ªùi")
    print("  - ƒê·∫£m b·∫£o bot ho·∫°t ƒë·ªông v·ªõi c·∫•u h√¨nh m·ªõi nh·∫•t")
    print("-" * 60)
    
    confirm = input("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën refresh bot? (y/n): ").strip().lower()
    
    if confirm == 'y':
        print("\nüîÑ ƒêang g·ª≠i l·ªánh refresh bot...")
        
        try:
            success, message = config_manager.refresh_bot()
            
            if success:
                print("‚úÖ Refresh bot th√†nh c√¥ng!")
                print(f"üìù Th√¥ng b√°o: {message}")
                
                print("\nüìã C√ÅC THAY ƒê·ªîI ƒê√É TH·ª∞C HI·ªÜN:")
                print("  ‚úÖ ƒê√£ t·∫£i l·∫°i c·∫•u h√¨nh t·ª´ database")
                print("  ‚úÖ ƒê√£ kh·ªüi ƒë·ªông l·∫°i c√°c strategy")
                print("  ‚úÖ ƒê√£ x√≥a cache v√† file t·∫°m th·ªùi")
                print("  ‚úÖ Bot ƒëang ho·∫°t ƒë·ªông v·ªõi c·∫•u h√¨nh m·ªõi nh·∫•t")
                
            else:
                print("‚ùå Refresh bot th·∫•t b·∫°i!")
                print(f"üìù L·ªói: {message}")
                
        except Exception as e:
            print("‚ùå L·ªói khi refresh bot:")
            print(f"   {e}")
    
    else:
        print("‚ùå ƒê√£ h·ªßy refresh bot")
    
    print("\n" + "=" * 60)
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu ch√≠nh...")

def show_main_menu(config_manager):
    """Hi·ªÉn th·ªã menu ch√≠nh"""
    while True:
        clear_screen()
        show_header()
        
        # Test k·∫øt n·ªëi
        if not config_manager.test_connection():
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!")
            print("H√£y ki·ªÉm tra:")
            print("  - Server c√≥ ƒëang ch·∫°y kh√¥ng?")
            print("  - IP address c√≥ ƒë√∫ng kh√¥ng?")
            print("  - Port 5000 c√≥ m·ªü kh√¥ng?")
            print(f"  - URL hi·ªán t·∫°i: {SERVER_URL}")
            print("\nNh·∫•n Enter ƒë·ªÉ th·ª≠ l·∫°i...")
            input()
            continue
        
        print("‚úÖ K·∫øt n·ªëi server th√†nh c√¥ng!")
        
        # L·∫•y th√¥ng tin c·∫•u h√¨nh
        config = config_manager.get_all_config()
        if config:
            print(f"üìä Th·ªëng k√™:")
            print(f"  - Settings: {len(config['settings'])} items")
            print(f"  - Strategies: {len(config['strategies'])} items")
            print(f"  - Strategy Configs: {len(config['strategy_config'])} items")
            print(f"  - Test Settings: {len(config['test_settings'])} items")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i refresh bot
            test_settings = config['test_settings']
            refresh_status = test_settings.get('refresh_bot', 'N/A')
            print(f"  - Refresh Bot: {refresh_status}")
        
        print("\nüîß MENU CH√çNH:")
        print("  1. ‚öôÔ∏è  Qu·∫£n l√Ω Settings")
        print("  2. üéØ Qu·∫£n l√Ω Strategies")
        print("  3. ‚öôÔ∏è  Qu·∫£n l√Ω Strategy Config")
        print("  4. üß™ Qu·∫£n l√Ω Test Settings")
        print("  5. üîÑ Refresh Bot")
        print("  6. üìä Xem to√†n b·ªô c·∫•u h√¨nh")
        print("  7. üí∞ Th√¥ng tin t√†i kho·∫£n MT5")
        print("  0. üö™ Tho√°t")
        print("-" * 60)
        
        choice = input("Ch·ªçn ch·ª©c nƒÉng (0-7): ").strip()
        
        if choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        elif choice == '1':
            show_settings_management(config_manager)
        elif choice == '2':
            show_strategies_management(config_manager)
        elif choice == '3':
            show_strategy_config_management(config_manager)
        elif choice == '4':
            show_test_settings_management(config_manager)
        elif choice == '5':
            show_refresh_bot(config_manager)
        elif choice == '6':
            show_full_config(config_manager)
        elif choice == '7':
            show_mt5_account_info(config_manager)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def main():
    """H√†m ch√≠nh"""
    global SERVER_URL
    
    print("üöÄ KH·ªûI ƒê·ªòNG CLIENT04.PY")
    print("=" * 60)
    
    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
    print("üì° Ki·ªÉm tra k·∫øt n·ªëi...")
    
    config_manager = ConfigManager(SERVER_URL)
    
    if not config_manager.test_connection():
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn {SERVER_URL}")
        print("\nüîß H∆Ø·ªöNG D·∫™N KH·∫ÆC PH·ª§C:")
        print("1. ƒê·∫£m b·∫£o server04.py ƒëang ch·∫°y tr√™n m√°y ch·ªß")
        print("2. Ki·ªÉm tra IP address trong file client04.py")
        print("3. ƒê·∫£m b·∫£o port 5000 ƒë∆∞·ª£c m·ªü")
        print("4. Ki·ªÉm tra firewall")
        print(f"\nIP hi·ªán t·∫°i: {SERVER_URL}")
        change_ip = input("B·∫°n c√≥ mu·ªën thay ƒë·ªïi IP kh√¥ng? (y/n): ").lower()
        if change_ip == 'y':
            new_ip = input("Nh·∫≠p IP m·ªõi: ").strip()
            if new_ip:
                SERVER_URL = f"http://{new_ip}:5000"
                config_manager = ConfigManager(SERVER_URL)
                print(f"‚úÖ ƒê√£ thay ƒë·ªïi IP th√†nh: {SERVER_URL}")
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    # Hi·ªÉn th·ªã menu ch√≠nh
    show_main_menu(config_manager)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã gi√°n ƒëo·∫°n")
        print("üëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
        print("H√£y ki·ªÉm tra l·∫°i v√† th·ª≠ l·∫°i") 